$date
	Mon Apr 29 12:59:59 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module set_tb $end
$var wire 64 ! o_addr [63:0] $end
$var wire 8 " hit [7:0] $end
$var reg 1 # clk $end
$var reg 64 $ pa [63:0] $end
$var reg 12 % pcid [11:0] $end
$var reg 64 & va [63:0] $end
$scope module TLB $end
$var wire 1 # clk $end
$var wire 12 ' in_pcid [11:0] $end
$var wire 64 ( pa [63:0] $end
$var wire 12 ) transl_pa [11:0] $end
$var wire 64 * va [63:0] $end
$var wire 49 + tag [48:0] $end
$var wire 3 , set [2:0] $end
$var wire 64 - o_addr [63:0] $end
$var wire 12 . local_addr [11:0] $end
$var wire 52 / insrt_pa [51:0] $end
$var wire 8 0 hit [7:0] $end
$var reg 8 1 enable [7:0] $end
$var reg 1 2 mode $end
$var reg 64 3 prev_addr [63:0] $end
$scope module _set_0 $end
$var wire 1 # clk $end
$var wire 1 4 enable $end
$var wire 1 2 mode $end
$var wire 12 5 pcid [11:0] $end
$var wire 52 6 pull_phys_add [51:0] $end
$var wire 49 7 tag [48:0] $end
$var wire 3 8 this_set [2:0] $end
$var wire 64 9 comp_addr [63:0] $end
$var reg 1 : hit $end
$var reg 7 ; plru [6:0] $end
$var reg 1 < push_phys_addr $end
$var integer 32 = bit [31:0] $end
$scope begin set_init $end
$var integer 32 > i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_1 $end
$var wire 1 # clk $end
$var wire 1 ? enable $end
$var wire 1 2 mode $end
$var wire 12 @ pcid [11:0] $end
$var wire 52 A pull_phys_add [51:0] $end
$var wire 49 B tag [48:0] $end
$var wire 3 C this_set [2:0] $end
$var wire 64 D comp_addr [63:0] $end
$var reg 1 E hit $end
$var reg 7 F plru [6:0] $end
$var reg 1 G push_phys_addr $end
$var integer 32 H bit [31:0] $end
$scope begin set_init $end
$var integer 32 I i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_2 $end
$var wire 1 # clk $end
$var wire 1 J enable $end
$var wire 1 2 mode $end
$var wire 12 K pcid [11:0] $end
$var wire 52 L pull_phys_add [51:0] $end
$var wire 49 M tag [48:0] $end
$var wire 3 N this_set [2:0] $end
$var wire 64 O comp_addr [63:0] $end
$var reg 1 P hit $end
$var reg 7 Q plru [6:0] $end
$var reg 1 R push_phys_addr $end
$var integer 32 S bit [31:0] $end
$scope begin set_init $end
$var integer 32 T i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_3 $end
$var wire 1 # clk $end
$var wire 1 U enable $end
$var wire 1 2 mode $end
$var wire 12 V pcid [11:0] $end
$var wire 52 W pull_phys_add [51:0] $end
$var wire 49 X tag [48:0] $end
$var wire 3 Y this_set [2:0] $end
$var wire 64 Z comp_addr [63:0] $end
$var reg 1 [ hit $end
$var reg 7 \ plru [6:0] $end
$var reg 1 ] push_phys_addr $end
$var integer 32 ^ bit [31:0] $end
$scope begin set_init $end
$var integer 32 _ i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_4 $end
$var wire 1 # clk $end
$var wire 1 ` enable $end
$var wire 1 2 mode $end
$var wire 12 a pcid [11:0] $end
$var wire 52 b pull_phys_add [51:0] $end
$var wire 49 c tag [48:0] $end
$var wire 3 d this_set [2:0] $end
$var wire 64 e comp_addr [63:0] $end
$var reg 1 f hit $end
$var reg 7 g plru [6:0] $end
$var reg 1 h push_phys_addr $end
$var integer 32 i bit [31:0] $end
$scope begin set_init $end
$var integer 32 j i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_5 $end
$var wire 1 # clk $end
$var wire 1 k enable $end
$var wire 1 2 mode $end
$var wire 12 l pcid [11:0] $end
$var wire 52 m pull_phys_add [51:0] $end
$var wire 49 n tag [48:0] $end
$var wire 3 o this_set [2:0] $end
$var wire 64 p comp_addr [63:0] $end
$var reg 1 q hit $end
$var reg 7 r plru [6:0] $end
$var reg 1 s push_phys_addr $end
$var integer 32 t bit [31:0] $end
$scope begin set_init $end
$var integer 32 u i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_6 $end
$var wire 1 # clk $end
$var wire 1 v enable $end
$var wire 1 2 mode $end
$var wire 12 w pcid [11:0] $end
$var wire 52 x pull_phys_add [51:0] $end
$var wire 49 y tag [48:0] $end
$var wire 3 z this_set [2:0] $end
$var wire 64 { comp_addr [63:0] $end
$var reg 1 | hit $end
$var reg 7 } plru [6:0] $end
$var reg 1 ~ push_phys_addr $end
$var integer 32 !" bit [31:0] $end
$scope begin set_init $end
$var integer 32 "" i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_7 $end
$var wire 1 # clk $end
$var wire 1 #" enable $end
$var wire 1 2 mode $end
$var wire 12 $" pcid [11:0] $end
$var wire 52 %" pull_phys_add [51:0] $end
$var wire 49 &" tag [48:0] $end
$var wire 3 '" this_set [2:0] $end
$var wire 64 (" comp_addr [63:0] $end
$var reg 1 )" hit $end
$var reg 7 *" plru [6:0] $end
$var reg 1 +" push_phys_addr $end
$var integer 32 ," bit [31:0] $end
$scope begin set_init $end
$var integer 32 -" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b111 -"
b0 ,"
x+"
b0 *"
0)"
b1111111111111111111111111111111111111111111111111111000000000000 ("
b111 '"
b1111111111111111111111111111111111111111111111111 &"
b0 %"
b0 $"
0#"
b111 ""
b0 !"
x~
b0 }
0|
b1111111111111111111111111111111111111111111111111111000000000000 {
b111 z
b1111111111111111111111111111111111111111111111111 y
b0 x
b0 w
0v
b111 u
b0 t
xs
b0 r
0q
b1111111111111111111111111111111111111111111111111111000000000000 p
b111 o
b1111111111111111111111111111111111111111111111111 n
b0 m
b0 l
0k
b111 j
b0 i
xh
b0 g
0f
b1111111111111111111111111111111111111111111111111111000000000000 e
b111 d
b1111111111111111111111111111111111111111111111111 c
b0 b
b0 a
0`
b111 _
b0 ^
x]
b0 \
0[
b1111111111111111111111111111111111111111111111111111000000000000 Z
b111 Y
b1111111111111111111111111111111111111111111111111 X
b0 W
b0 V
0U
b111 T
b0 S
xR
b0 Q
0P
b1111111111111111111111111111111111111111111111111111000000000000 O
b111 N
b1111111111111111111111111111111111111111111111111 M
b0 L
b0 K
0J
b111 I
b0 H
xG
b0 F
0E
b1111111111111111111111111111111111111111111111111111000000000000 D
b111 C
b1111111111111111111111111111111111111111111111111 B
b0 A
b0 @
0?
b111 >
b0 =
x<
b0 ;
0:
b1111111111111111111111111111111111111111111111111111000000000000 9
b111 8
b1111111111111111111111111111111111111111111111111 7
b0 6
b0 5
04
b0 3
x2
b0 1
b0 0
b0 /
b111111111111 .
bz000000000000 -
b111 ,
b1111111111111111111111111111111111111111111111111 +
b1111111111111111111111111111111111111111111111111111111111111111 *
b0x )
b0 (
b0 '
b1111111111111111111111111111111111111111111111111111111111111111 &
b0 %
b0 $
0#
b0 "
bz000000000000 !
$end
#1
b1111111111111111111111111111111111111111111111111111111111111111 3
1#"
b10000000 1
1#
#2
b110 ,"
b1000101 *"
b0 "
b0 0
0)"
0#
#3
0#"
b0 1
1#
#4
0#
#5
1#
#6
0#
#7
1#
#8
0#
#9
1#
#10
b0 .
b0 ,
b0 8
b0 C
b0 N
b0 Y
b0 d
b0 o
b0 z
b0 '"
b0 9
b0 D
b0 O
b0 Z
b0 e
b0 p
b0 {
b0 ("
b0 +
b0 7
b0 B
b0 M
b0 X
b0 c
b0 n
b0 y
b0 &"
0#
b0 &
b0 *
#11
b0 3
14
b1 1
1#
#12
b1 "
b1 0
1:
0#
#13
04
b0 1
1#
#14
b0 "
b0 0
0:
0#
#15
1#
#16
0#
#17
1#
#18
0#
#19
1#
#20
b111111111111 .
b111 ,
b111 8
b111 C
b111 N
b111 Y
b111 d
b111 o
b111 z
b111 '"
b1111111111111111111111111111111111111111111111111111000000000000 9
b1111111111111111111111111111111111111111111111111111000000000000 D
b1111111111111111111111111111111111111111111111111111000000000000 O
b1111111111111111111111111111111111111111111111111111000000000000 Z
b1111111111111111111111111111111111111111111111111111000000000000 e
b1111111111111111111111111111111111111111111111111111000000000000 p
b1111111111111111111111111111111111111111111111111111000000000000 {
b1111111111111111111111111111111111111111111111111111000000000000 ("
b1111111111111111111111111111111111111111111111111 +
b1111111111111111111111111111111111111111111111111 7
b1111111111111111111111111111111111111111111111111 B
b1111111111111111111111111111111111111111111111111 M
b1111111111111111111111111111111111111111111111111 X
b1111111111111111111111111111111111111111111111111 c
b1111111111111111111111111111111111111111111111111 n
b1111111111111111111111111111111111111111111111111 y
b1111111111111111111111111111111111111111111111111 &"
0#
b1111111111111111111111111111111111111111111111111111111111111111 &
b1111111111111111111111111111111111111111111111111111111111111111 *
#21
b1111111111111111111111111111111111111111111111111111111111111111 3
1#"
b10000000 1
1#
#22
b0 "
b0 0
0)"
0#
#23
0#"
b0 1
1#
#24
0#
#25
1#
#26
0#
#27
1#
#28
0#
#29
1#
#30
0#
#31
1#
#32
0#
#33
1#
#34
0#
#35
1#
#36
0#
#37
1#
#38
0#
#39
1#
#40
0#
#41
1#
#42
0#
#43
1#
#44
0#
#45
1#
#46
0#
#47
1#
#48
0#
#49
1#
#50
0#
#51
1#
#52
0#
#53
1#
#54
0#
#55
1#
#56
0#
#57
1#
#58
0#
#59
1#
#60
0#
#61
1#
#62
0#
#63
1#
#64
0#
#65
1#
#66
0#
#67
1#
#68
0#
#69
1#
#70
0#
#71
1#
#72
0#
#73
1#
#74
0#
#75
1#
#76
0#
#77
1#
#78
0#
#79
1#
#80
0#
#81
1#
#82
0#
#83
1#
#84
0#
#85
1#
#86
0#
#87
1#
#88
0#
#89
1#
#90
0#
#91
1#
#92
0#
#93
1#
#94
0#
#95
1#
#96
0#
#97
1#
#98
0#
#99
1#
#100
0#
#101
1#
#102
0#
#103
1#
#104
0#
#105
1#
#106
0#
#107
1#
#108
0#
#109
1#
#110
0#
#111
1#
#112
0#
#113
1#
#114
0#
#115
1#
#116
0#
#117
1#
#118
0#
#119
1#
#120
0#
