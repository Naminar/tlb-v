$date
	Mon Apr 29 01:59:46 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module set_tb $end
$var wire 64 ! o_addr [63:0] $end
$var wire 8 " hit [7:0] $end
$var reg 1 # clk $end
$var reg 64 $ in_addr [63:0] $end
$var reg 12 % in_pcid [11:0] $end
$scope module TLB $end
$var wire 1 # clk $end
$var wire 64 & in_addr [63:0] $end
$var wire 12 ' in_pcid [11:0] $end
$var wire 64 ( o_addr [63:0] $end
$var wire 49 ) tag [48:0] $end
$var wire 3 * set [2:0] $end
$var wire 12 + local_addr [11:0] $end
$var wire 8 , hit [7:0] $end
$var reg 8 - enable [7:0] $end
$var reg 64 . prev_addr [63:0] $end
$scope module _set_0 $end
$var wire 1 # clk $end
$var wire 1 / enable $end
$var wire 12 0 pcid [11:0] $end
$var wire 49 1 tag [48:0] $end
$var wire 3 2 this_set [2:0] $end
$var wire 64 3 comp_addr [63:0] $end
$var reg 1 4 hit $end
$var reg 7 5 plru [6:0] $end
$var integer 32 6 bit [31:0] $end
$scope begin set_init $end
$var integer 32 7 i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_1 $end
$var wire 1 # clk $end
$var wire 1 8 enable $end
$var wire 12 9 pcid [11:0] $end
$var wire 49 : tag [48:0] $end
$var wire 3 ; this_set [2:0] $end
$var wire 64 < comp_addr [63:0] $end
$var reg 1 = hit $end
$var reg 7 > plru [6:0] $end
$var integer 32 ? bit [31:0] $end
$scope begin set_init $end
$var integer 32 @ i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_2 $end
$var wire 1 # clk $end
$var wire 1 A enable $end
$var wire 12 B pcid [11:0] $end
$var wire 49 C tag [48:0] $end
$var wire 3 D this_set [2:0] $end
$var wire 64 E comp_addr [63:0] $end
$var reg 1 F hit $end
$var reg 7 G plru [6:0] $end
$var integer 32 H bit [31:0] $end
$scope begin set_init $end
$var integer 32 I i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_3 $end
$var wire 1 # clk $end
$var wire 1 J enable $end
$var wire 12 K pcid [11:0] $end
$var wire 49 L tag [48:0] $end
$var wire 3 M this_set [2:0] $end
$var wire 64 N comp_addr [63:0] $end
$var reg 1 O hit $end
$var reg 7 P plru [6:0] $end
$var integer 32 Q bit [31:0] $end
$scope begin set_init $end
$var integer 32 R i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_4 $end
$var wire 1 # clk $end
$var wire 1 S enable $end
$var wire 12 T pcid [11:0] $end
$var wire 49 U tag [48:0] $end
$var wire 3 V this_set [2:0] $end
$var wire 64 W comp_addr [63:0] $end
$var reg 1 X hit $end
$var reg 7 Y plru [6:0] $end
$var integer 32 Z bit [31:0] $end
$scope begin set_init $end
$var integer 32 [ i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_5 $end
$var wire 1 # clk $end
$var wire 1 \ enable $end
$var wire 12 ] pcid [11:0] $end
$var wire 49 ^ tag [48:0] $end
$var wire 3 _ this_set [2:0] $end
$var wire 64 ` comp_addr [63:0] $end
$var reg 1 a hit $end
$var reg 7 b plru [6:0] $end
$var integer 32 c bit [31:0] $end
$scope begin set_init $end
$var integer 32 d i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_6 $end
$var wire 1 # clk $end
$var wire 1 e enable $end
$var wire 12 f pcid [11:0] $end
$var wire 49 g tag [48:0] $end
$var wire 3 h this_set [2:0] $end
$var wire 64 i comp_addr [63:0] $end
$var reg 1 j hit $end
$var reg 7 k plru [6:0] $end
$var integer 32 l bit [31:0] $end
$scope begin set_init $end
$var integer 32 m i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_7 $end
$var wire 1 # clk $end
$var wire 1 n enable $end
$var wire 12 o pcid [11:0] $end
$var wire 49 p tag [48:0] $end
$var wire 3 q this_set [2:0] $end
$var wire 64 r comp_addr [63:0] $end
$var reg 1 s hit $end
$var reg 7 t plru [6:0] $end
$var integer 32 u bit [31:0] $end
$scope begin set_init $end
$var integer 32 v i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b111 v
b0 u
b0 t
0s
b1111111111111111111111111111111111111111111111111111000000000000 r
b111 q
b1111111111111111111111111111111111111111111111111 p
b0 o
0n
b111 m
b0 l
b0 k
0j
b1111111111111111111111111111111111111111111111111111000000000000 i
b111 h
b1111111111111111111111111111111111111111111111111 g
b0 f
0e
b111 d
b0 c
b0 b
0a
b1111111111111111111111111111111111111111111111111111000000000000 `
b111 _
b1111111111111111111111111111111111111111111111111 ^
b0 ]
0\
b111 [
b0 Z
b0 Y
0X
b1111111111111111111111111111111111111111111111111111000000000000 W
b111 V
b1111111111111111111111111111111111111111111111111 U
b0 T
0S
b111 R
b0 Q
b0 P
0O
b1111111111111111111111111111111111111111111111111111000000000000 N
b111 M
b1111111111111111111111111111111111111111111111111 L
b0 K
0J
b111 I
b0 H
b0 G
0F
b1111111111111111111111111111111111111111111111111111000000000000 E
b111 D
b1111111111111111111111111111111111111111111111111 C
b0 B
0A
b111 @
b0 ?
b0 >
0=
b1111111111111111111111111111111111111111111111111111000000000000 <
b111 ;
b1111111111111111111111111111111111111111111111111 :
b0 9
08
b111 7
b0 6
b0 5
04
b1111111111111111111111111111111111111111111111111111000000000000 3
b111 2
b1111111111111111111111111111111111111111111111111 1
b0 0
0/
b0 .
b0 -
b0 ,
b111111111111 +
b111 *
b1111111111111111111111111111111111111111111111111 )
bz (
b0 '
b1111111111111111111111111111111111111111111111111111111111111111 &
b0 %
b1111111111111111111111111111111111111111111111111111111111111111 $
0#
b0 "
bz !
$end
#1
b1111111111111111111111111111111111111111111111111111111111111111 .
1n
b10000000 -
1#
#2
b110 u
b1000101 t
b0 "
b0 ,
0s
0#
#3
0n
b0 -
1#
#4
0#
#5
1#
#6
0#
#7
1#
#8
0#
#9
1#
#10
b0 +
b0 *
b0 2
b0 ;
b0 D
b0 M
b0 V
b0 _
b0 h
b0 q
b0 3
b0 <
b0 E
b0 N
b0 W
b0 `
b0 i
b0 r
b0 )
b0 1
b0 :
b0 C
b0 L
b0 U
b0 ^
b0 g
b0 p
0#
b0 $
b0 &
#11
b0 .
1/
b1 -
1#
#12
b1 "
b1 ,
14
0#
#13
0/
b0 -
1#
#14
b0 "
b0 ,
04
0#
#15
1#
#16
0#
#17
1#
#18
0#
#19
1#
#20
b111111111111 +
b111 *
b111 2
b111 ;
b111 D
b111 M
b111 V
b111 _
b111 h
b111 q
b1111111111111111111111111111111111111111111111111111000000000000 3
b1111111111111111111111111111111111111111111111111111000000000000 <
b1111111111111111111111111111111111111111111111111111000000000000 E
b1111111111111111111111111111111111111111111111111111000000000000 N
b1111111111111111111111111111111111111111111111111111000000000000 W
b1111111111111111111111111111111111111111111111111111000000000000 `
b1111111111111111111111111111111111111111111111111111000000000000 i
b1111111111111111111111111111111111111111111111111111000000000000 r
b1111111111111111111111111111111111111111111111111 )
b1111111111111111111111111111111111111111111111111 1
b1111111111111111111111111111111111111111111111111 :
b1111111111111111111111111111111111111111111111111 C
b1111111111111111111111111111111111111111111111111 L
b1111111111111111111111111111111111111111111111111 U
b1111111111111111111111111111111111111111111111111 ^
b1111111111111111111111111111111111111111111111111 g
b1111111111111111111111111111111111111111111111111 p
0#
b1111111111111111111111111111111111111111111111111111111111111111 $
b1111111111111111111111111111111111111111111111111111111111111111 &
#21
b1111111111111111111111111111111111111111111111111111111111111111 .
1n
b10000000 -
1#
#22
b0 "
b0 ,
0s
0#
#23
0n
b0 -
1#
#24
0#
#25
1#
#26
0#
#27
1#
#28
0#
#29
1#
#30
0#
#31
1#
#32
0#
#33
1#
#34
0#
#35
1#
#36
0#
#37
1#
#38
0#
#39
1#
#40
0#
#41
1#
#42
0#
#43
1#
#44
0#
#45
1#
#46
0#
#47
1#
#48
0#
#49
1#
#50
0#
#51
1#
#52
0#
#53
1#
#54
0#
#55
1#
#56
0#
#57
1#
#58
0#
#59
1#
#60
0#
#61
1#
#62
0#
#63
1#
#64
0#
#65
1#
#66
0#
#67
1#
#68
0#
#69
1#
#70
0#
#71
1#
#72
0#
#73
1#
#74
0#
#75
1#
#76
0#
#77
1#
#78
0#
#79
1#
#80
0#
#81
1#
#82
0#
#83
1#
#84
0#
#85
1#
#86
0#
#87
1#
#88
0#
#89
1#
#90
0#
#91
1#
#92
0#
#93
1#
#94
0#
#95
1#
#96
0#
#97
1#
#98
0#
#99
1#
#100
0#
#101
1#
#102
0#
#103
1#
#104
0#
#105
1#
#106
0#
#107
1#
#108
0#
#109
1#
#110
0#
#111
1#
#112
0#
#113
1#
#114
0#
#115
1#
#116
0#
#117
1#
#118
0#
#119
1#
#120
0#
