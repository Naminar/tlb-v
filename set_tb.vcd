$date
	Mon Apr 29 15:52:29 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module set_tb $end
$var wire 64 ! o_addr [63:0] $end
$var wire 8 " hit [7:0] $end
$var reg 1 # clk $end
$var reg 64 $ pa [63:0] $end
$var reg 12 % pcid [11:0] $end
$var reg 64 & va [63:0] $end
$scope module TLB $end
$var wire 1 # clk $end
$var wire 12 ' in_pcid [11:0] $end
$var wire 64 ( pa [63:0] $end
$var wire 64 ) va [63:0] $end
$var wire 49 * tag [48:0] $end
$var wire 3 + set [2:0] $end
$var wire 12 , local_addr [11:0] $end
$var wire 52 - insrt_pa [51:0] $end
$var wire 8 . hit [7:0] $end
$var wire 8 / clr_set [7:0] $end
$var reg 8 0 enable [7:0] $end
$var reg 1 1 mode $end
$var reg 64 2 o_addr [63:0] $end
$var reg 64 3 prev_addr [63:0] $end
$scope module _set_0 $end
$var wire 1 1 X_X $end
$var wire 1 # clk $end
$var wire 1 4 enable $end
$var wire 12 5 pcid [11:0] $end
$var wire 52 6 pull_phys_add [51:0] $end
$var wire 49 7 tag [48:0] $end
$var wire 64 8 comp_addr [63:0] $end
$var reg 1 9 clr $end
$var reg 1 : hit $end
$var reg 1 ; mode $end
$var reg 7 < plru [6:0] $end
$var reg 52 = push_phys_addr [51:0] $end
$var integer 32 > bit [31:0] $end
$scope begin set_init $end
$var integer 32 ? i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_1 $end
$var wire 1 1 X_X $end
$var wire 1 # clk $end
$var wire 1 @ enable $end
$var wire 12 A pcid [11:0] $end
$var wire 52 B pull_phys_add [51:0] $end
$var wire 49 C tag [48:0] $end
$var wire 64 D comp_addr [63:0] $end
$var reg 1 E clr $end
$var reg 1 F hit $end
$var reg 1 G mode $end
$var reg 7 H plru [6:0] $end
$var reg 52 I push_phys_addr [51:0] $end
$var integer 32 J bit [31:0] $end
$scope begin set_init $end
$var integer 32 K i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_2 $end
$var wire 1 1 X_X $end
$var wire 1 # clk $end
$var wire 1 L enable $end
$var wire 12 M pcid [11:0] $end
$var wire 52 N pull_phys_add [51:0] $end
$var wire 49 O tag [48:0] $end
$var wire 64 P comp_addr [63:0] $end
$var reg 1 Q clr $end
$var reg 1 R hit $end
$var reg 1 S mode $end
$var reg 7 T plru [6:0] $end
$var reg 52 U push_phys_addr [51:0] $end
$var integer 32 V bit [31:0] $end
$scope begin set_init $end
$var integer 32 W i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_3 $end
$var wire 1 1 X_X $end
$var wire 1 # clk $end
$var wire 1 X enable $end
$var wire 12 Y pcid [11:0] $end
$var wire 52 Z pull_phys_add [51:0] $end
$var wire 49 [ tag [48:0] $end
$var wire 64 \ comp_addr [63:0] $end
$var reg 1 ] clr $end
$var reg 1 ^ hit $end
$var reg 1 _ mode $end
$var reg 7 ` plru [6:0] $end
$var reg 52 a push_phys_addr [51:0] $end
$var integer 32 b bit [31:0] $end
$scope begin set_init $end
$var integer 32 c i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_4 $end
$var wire 1 1 X_X $end
$var wire 1 # clk $end
$var wire 1 d enable $end
$var wire 12 e pcid [11:0] $end
$var wire 52 f pull_phys_add [51:0] $end
$var wire 49 g tag [48:0] $end
$var wire 64 h comp_addr [63:0] $end
$var reg 1 i clr $end
$var reg 1 j hit $end
$var reg 1 k mode $end
$var reg 7 l plru [6:0] $end
$var reg 52 m push_phys_addr [51:0] $end
$var integer 32 n bit [31:0] $end
$scope begin set_init $end
$var integer 32 o i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_5 $end
$var wire 1 1 X_X $end
$var wire 1 # clk $end
$var wire 1 p enable $end
$var wire 12 q pcid [11:0] $end
$var wire 52 r pull_phys_add [51:0] $end
$var wire 49 s tag [48:0] $end
$var wire 64 t comp_addr [63:0] $end
$var reg 1 u clr $end
$var reg 1 v hit $end
$var reg 1 w mode $end
$var reg 7 x plru [6:0] $end
$var reg 52 y push_phys_addr [51:0] $end
$var integer 32 z bit [31:0] $end
$scope begin set_init $end
$var integer 32 { i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_6 $end
$var wire 1 1 X_X $end
$var wire 1 # clk $end
$var wire 1 | enable $end
$var wire 12 } pcid [11:0] $end
$var wire 52 ~ pull_phys_add [51:0] $end
$var wire 49 !" tag [48:0] $end
$var wire 64 "" comp_addr [63:0] $end
$var reg 1 #" clr $end
$var reg 1 $" hit $end
$var reg 1 %" mode $end
$var reg 7 &" plru [6:0] $end
$var reg 52 '" push_phys_addr [51:0] $end
$var integer 32 (" bit [31:0] $end
$scope begin set_init $end
$var integer 32 )" i [31:0] $end
$upscope $end
$upscope $end
$scope module _set_7 $end
$var wire 1 1 X_X $end
$var wire 1 # clk $end
$var wire 1 *" enable $end
$var wire 12 +" pcid [11:0] $end
$var wire 52 ," pull_phys_add [51:0] $end
$var wire 49 -" tag [48:0] $end
$var wire 64 ." comp_addr [63:0] $end
$var reg 1 /" clr $end
$var reg 1 0" hit $end
$var reg 1 1" mode $end
$var reg 7 2" plru [6:0] $end
$var reg 52 3" push_phys_addr [51:0] $end
$var integer 32 4" bit [31:0] $end
$scope begin set_init $end
$var integer 32 5" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b111 5"
b0 4"
bx 3"
b0 2"
01"
00"
0/"
b1111111111111111111111111111111111111111111111111000000000000 ."
b1111111111111111111111111111111111111111111111111 -"
b0 ,"
b0 +"
0*"
b111 )"
b0 ("
bx '"
b0 &"
0%"
0$"
0#"
b1111111111111111111111111111111111111111111111111000000000000 ""
b1111111111111111111111111111111111111111111111111 !"
b0 ~
b0 }
0|
b111 {
b0 z
bx y
b0 x
0w
0v
0u
b1111111111111111111111111111111111111111111111111000000000000 t
b1111111111111111111111111111111111111111111111111 s
b0 r
b0 q
0p
b111 o
b0 n
bx m
b0 l
0k
0j
0i
b1111111111111111111111111111111111111111111111111000000000000 h
b1111111111111111111111111111111111111111111111111 g
b0 f
b0 e
0d
b111 c
b0 b
bx a
b0 `
0_
0^
0]
b1111111111111111111111111111111111111111111111111000000000000 \
b1111111111111111111111111111111111111111111111111 [
b0 Z
b0 Y
0X
b111 W
b0 V
bx U
b0 T
0S
0R
0Q
b1111111111111111111111111111111111111111111111111000000000000 P
b1111111111111111111111111111111111111111111111111 O
b0 N
b0 M
0L
b111 K
b0 J
bx I
b0 H
0G
0F
0E
b1111111111111111111111111111111111111111111111111000000000000 D
b1111111111111111111111111111111111111111111111111 C
b0 B
b0 A
0@
b111 ?
b0 >
bx =
b0 <
0;
0:
09
b1111111111111111111111111111111111111111111111111000000000000 8
b1111111111111111111111111111111111111111111111111 7
b0 6
b0 5
04
b0 3
bx 2
01
b0 0
b0 /
b0 .
b0 -
b111111110001 ,
b111 +
b1111111111111111111111111111111111111111111111111 *
b1111111111111111111111111111111111111111111111111111111111110001 )
b0 (
b0 '
b1111111111111111111111111111111111111111111111111111111111110001 &
b0 %
b0 $
0#
b0 "
bx !
$end
#1
b1111111111111111111111111111111111111111111111111111111111110001 3
1*"
b10000000 0
1#
#2
11"
b0 /
0/"
b0 "
b0 .
00"
0#
#3
1#
#4
01"
b10000000 /
1/"
b110 4"
b1000101 2"
0#
#5
bx111111110001 !
bx111111110001 2
0*"
b0 0
1#
#6
b0 /
0/"
0#
#7
1#
#8
0#
#9
1#
#10
b0 ,
b0 +
b0 8
b0 D
b0 P
b0 \
b0 h
b0 t
b0 ""
b0 ."
b0 *
b0 7
b0 C
b0 O
b0 [
b0 g
b0 s
b0 !"
b0 -"
0#
b0 &
b0 )
#11
b0 3
14
b1 0
1#
#12
b1 /
19
b1 "
b1 .
1:
0#
#13
bx000000000000 !
bx000000000000 2
04
b0 0
1#
#14
b0 "
b0 .
0:
b0 /
09
0#
#15
1#
#16
0#
#17
1#
#18
0#
#19
1#
#20
b111111110010 ,
b111 +
b1111111111111111111111111111111111111111111111111000000000000 8
b1111111111111111111111111111111111111111111111111000000000000 D
b1111111111111111111111111111111111111111111111111000000000000 P
b1111111111111111111111111111111111111111111111111000000000000 \
b1111111111111111111111111111111111111111111111111000000000000 h
b1111111111111111111111111111111111111111111111111000000000000 t
b1111111111111111111111111111111111111111111111111000000000000 ""
b1111111111111111111111111111111111111111111111111000000000000 ."
b1111111111111111111111111111111111111111111111111 *
b1111111111111111111111111111111111111111111111111 7
b1111111111111111111111111111111111111111111111111 C
b1111111111111111111111111111111111111111111111111 O
b1111111111111111111111111111111111111111111111111 [
b1111111111111111111111111111111111111111111111111 g
b1111111111111111111111111111111111111111111111111 s
b1111111111111111111111111111111111111111111111111 !"
b1111111111111111111111111111111111111111111111111 -"
0#
b1111111111111111111111111111111111111111111111111111111111110010 &
b1111111111111111111111111111111111111111111111111111111111110010 )
#21
b1111111111111111111111111111111111111111111111111111111111110010 3
1*"
b10000000 0
1#
#22
b0 3"
b10000000 /
1/"
b10000000 "
b10000000 .
10"
0#
#23
b111111110010 !
b111111110010 2
0*"
b0 0
1#
#24
b0 "
b0 .
00"
b0 /
0/"
0#
#25
1#
#26
0#
#27
1#
#28
0#
#29
1#
#30
0#
#31
1#
#32
0#
#33
1#
#34
0#
#35
1#
#36
0#
#37
1#
#38
0#
#39
1#
#40
0#
#41
1#
#42
0#
#43
1#
#44
0#
#45
1#
#46
0#
#47
1#
#48
0#
#49
1#
#50
0#
#51
1#
#52
0#
#53
1#
#54
0#
#55
1#
#56
0#
#57
1#
#58
0#
#59
1#
#60
0#
#61
1#
#62
0#
#63
1#
#64
0#
#65
1#
#66
0#
#67
1#
#68
0#
#69
1#
#70
0#
#71
1#
#72
0#
#73
1#
#74
0#
#75
1#
#76
0#
#77
1#
#78
0#
#79
1#
#80
0#
#81
1#
#82
0#
#83
1#
#84
0#
#85
1#
#86
0#
#87
1#
#88
0#
#89
1#
#90
0#
#91
1#
#92
0#
#93
1#
#94
0#
#95
1#
#96
0#
#97
1#
#98
0#
#99
1#
#100
0#
#101
1#
#102
0#
#103
1#
#104
0#
#105
1#
#106
0#
#107
1#
#108
0#
#109
1#
#110
0#
#111
1#
#112
0#
#113
1#
#114
0#
#115
1#
#116
0#
#117
1#
#118
0#
#119
1#
#120
0#
